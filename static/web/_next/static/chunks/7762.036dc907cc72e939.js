"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7762],{17762:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{solr:function(){return solr}});var isStringChar=/[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/,isOperatorChar=/[\|\!\+\-\*\?\~\^\&]/,isOperatorString=/^(OR|AND|NOT|TO)$/i;function tokenBase(stream,state){var ch,ch1=stream.next();return'"'==ch1?state.tokenize=function(stream,state){for(var next,escaped=!1;null!=(next=stream.next())&&(next!=ch1||escaped);)escaped=!escaped&&"\\"==next;return escaped||(state.tokenize=tokenBase),"string"}:isOperatorChar.test(ch1)?state.tokenize=function(stream,state){return"|"==ch1?stream.eat(/\|/):"&"==ch1&&stream.eat(/\&/),state.tokenize=tokenBase,"operator"}:isStringChar.test(ch1)&&(state.tokenize=(ch=ch1,function(stream,state){for(var word,word1=ch;(ch=stream.peek())&&null!=ch.match(isStringChar);)word1+=stream.next();return(state.tokenize=tokenBase,isOperatorString.test(word1))?"operator":parseFloat(word=word1).toString()===word?"number":":"==stream.peek()?"propertyName":"string"})),state.tokenize!=tokenBase?state.tokenize(stream,state):null}let solr={name:"solr",startState:function(){return{tokenize:tokenBase}},token:function(stream,state){return stream.eatSpace()?null:state.tokenize(stream,state)}}}}]);